---
# dependency on: ansible-galaxy collection install community.crypto
# needs PyOpenSSL or cryptogrphy
#
# set to force:no so that once a key/cert pair is created, we don't overwrite

#
# Create CA 
# https://milliams.com/posts/2020/ansible-certificate-authority/
#
- name: create CA key
  community.crypto.openssl_privatekey:
    path: "{{TMPDIR}}/{{cert_CA}}.key"
    force: "{{cert_overwrite}}"
  register: ca_key

- name: create the CA CSR
  community.crypto.openssl_csr:
    path: "{{TMPDIR}}/{{cert_CA}}.csr"
    privatekey_path: "{{ ca_key.filename }}"
    # constraints and usage required by CA
    basic_constraints_critical: true
    basic_constraints:
      - CA:TRUE
      - pathlen:3
    key_usage:
      - digitalSignature
      - cRLSign
      - keyCertSign
    common_name: "{{cert_CA}}"
    force: "{{cert_overwrite}}"
  register: ca_csr

- name: sign the CA CSR
  openssl_certificate:
    path: "{{TMPDIR}}/{{cert_CA}}.crt"
    csr_path: "{{ ca_csr.filename }}"
    privatekey_path: "{{ ca_key.filename }}"
    provider: selfsigned
    force: "{{cert_overwrite}}"
  register: ca_crt

- name: remove local ca cert, before fetching again
  delegate_to: localhost
  file:
    path: "{{LOCALDIR}}/{{ca_crt.filename}}"
    state: absent
- name: copy ca cert locally, so it can be loaded into trusted CA
  fetch:
    src: "{{ca_crt.filename}}"
    dest: "{{LOCALDIR}}/"
    flat: true

- name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
  community.crypto.openssl_privatekey:
    path: "{{TMPDIR}}/{{cert_domains_primary_ingress | first}}.key"
    force: "{{cert_overwrite}}"
  register: cert_key

- name: Generate an OpenSSL Certificate Signing Request
  community.crypto.openssl_csr:
    path: "{{TMPDIR}}/{{cert_domains_primary_ingress | first}}.csr"
    privatekey_path: "{{TMPDIR}}/{{cert_domains_primary_ingress | first}}.key"
    key_usage:
      - digitalSignature
      - nonRepudiation
      - keyEncipherment
    extended_key_usage:
      - serverAuth
      - clientAuth
      - 1.3.6.1.4.1.311.10.3.4
    common_name: "{{ cert_domains_primary_ingress | first }}"
    subject_alt_name: "{{ item.value | map('regex_replace', '^', 'DNS:') | list }}"
    force: "{{cert_overwrite}}"
  register: cert_csr
  with_dict:
    dns_server: "{{ cert_domains_primary_ingress + cert_domains_secondary_ingress }}"

- name: Generate an OpenSSL certificate
  community.crypto.x509_certificate:
    path: "{{TMPDIR}}/{{ cert_domains_primary_ingress | first }}.crt"
    privatekey_path: "{{TMPDIR}}/{{cert_domains_primary_ingress|first}}.key"
    csr_path: "{{TMPDIR}}/{{cert_domains_primary_ingress|first}}.csr"
    ownca_path: "{{ca_crt.filename}}"
    ownca_privatekey_path: "{{ca_key.filename}}"
    provider: ownca # selfsigned if this had been self-signed
    force: "{{cert_overwrite}}"
  register: cert_crt

- name: remove local cert, before fetching again
  delegate_to: localhost
  file:
    path: "{{LOCALDIR}}/{{cert_crt.filename}}"
    state: absent
- name: copy cert locally, so it can be added as trusted cert
  fetch:
    src: "{{cert_crt.filename}}"
    dest: "{{LOCALDIR}}/"
    flat: true

- name: generate pkcs12 file
  community.crypto.openssl_pkcs12:
    action: export
    path: "{{TMPDIR}}/{{ cert_domains_primary_ingress | first }}.p12"
    friendly_name: "{{ cert_domains_primary_ingress | first }}"
    privatekey_path: "{{ cert_key.filename }}"
    certificate_path: "{{ cert_crt.filename }}"
    # was called 'ca_cerficates' before 2.8
    other_certificates: "{{ ca_crt.filename }}"
    force: "{{cert_overwrite}}"
    state: present
  register: cert_p12

- name: show cert
  community.crypto.x509_certificate_info:
    path: "{{cert_crt.filename}}"
  register: cert_result
- debug: 
    msg: >
      subject: {{cert_result.subject}}
      issuer: {{cert_result.issuer}}
      subject_alt_name: {{cert_result.subject_alt_name}}

- name: verify cert against CA using openssl
  command: openssl verify -CAfile {{ca_crt.filename}} {{cert_crt.filename}}
  register: cert_validate
- debug: msg="{{cert_validate.stdout}}"

